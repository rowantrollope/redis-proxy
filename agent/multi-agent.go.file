package main

import (
	"log"
	"net"
	"net/url"
	"sync"

	"github.com/google/uuid"
	"github.com/gorilla/websocket"
)

const (
	SERVER_URL = "ws://127.0.0.1:8080/agent"
)

var redisServers = []string{
	"127.0.0.1:6379",
	"127.0.0.1:6380",
	// Add more Redis server addresses as needed
}

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	var wg sync.WaitGroup

	for _, redisAddr := range redisServers {
		wg.Add(1)
		go func(redisAddr string) {
			defer wg.Done()
			err := handleRedisConnection(redisAddr)
			if err != nil {
				log.Printf("Error handling Redis at %s: %v", redisAddr, err)
			}
		}(redisAddr)
	}

	wg.Wait()
}

func handleRedisConnection(redisAddr string) error {
	// Generate a new UUID for this Redis connection
	newUUID, err := uuid.NewRandom()
	if err != nil {
		return err
	}
	agentID := newUUID.String()
	log.Printf("Generated Agent ID: %s for Redis at %s", agentID, redisAddr)

	u, err := url.Parse(SERVER_URL)
	if err != nil {
		return err
	}

	log.Printf("Connecting to server at %s", u.String())

	wsConn, _, err := websocket.DefaultDialer.Dial(u.String(), nil)
	if err != nil {
		return err
	}
	defer wsConn.Close()

	log.Println("Connected to server")

	// Send the agent ID to the server
	err = wsConn.WriteMessage(websocket.TextMessage, []byte(agentID))
	if err != nil {
		return err
	}

	log.Printf("Sent Agent ID to server: %s", agentID)

	// Connect to the Redis server
	log.Printf("Connecting to Redis server at %s", redisAddr)
	redisConn, err := net.Dial("tcp", redisAddr)
	if err != nil {
		return err
	}
	defer redisConn.Close()

	log.Println("Connected to Redis")

	done := make(chan struct{})

	// Copy data from the server to Redis
	go func() {
		defer close(done)
		for {
			messageType, message, err := wsConn.ReadMessage()
			if err != nil {
				log.Printf("Error reading from server: %v", err)
				return
			}
			log.Printf("Received message from server (type %d): %s", messageType, string(message))
			_, err = redisConn.Write(message)
			if err != nil {
				log.Printf("Error writing to Redis: %v", err)
				return
			}
			log.Println("Forwarded message to Redis")
		}
	}()

	// Copy data from Redis to the server
	for {
		buf := make([]byte, 4096) // Adjust buffer size as needed
		n, err := redisConn.Read(buf)
		if err != nil {
			log.Printf("Error reading from Redis: %v", err)
			break
		}
		data := buf[:n]
		log.Printf("Received %d bytes from Redis", n)

		writer, err := wsConn.NextWriter(websocket.BinaryMessage)
		if err != nil {
			log.Printf("Error creating NextWriter: %v", err)
			break
		}

		_, err = writer.Write(data)
		if err != nil {
			log.Printf("Error writing to server: %v", err)
			writer.Close()
			break
		}

		err = writer.Close()
		if err != nil {
			log.Printf("Error closing writer: %v", err)
			break
		}
		log.Println("Sent data to server")
	}

	<-done
	return nil
}
